Table LogEntry {
  id auto [pk, unique]
  action_time date_time 
  user foreign_key 
  content_type foreign_key [null]
  object_id text [null]
  object_repr char 
  action_flag positive_small_integer 
  change_message text 
  Note: '''LogEntry(id, action_time, user, content_type, object_id, object_repr, action_flag, change_message)'''
}
ref: LogEntry.user > User.id
ref: LogEntry.content_type > ContentType.id


Table Permission {
  id auto [pk, unique]
  name char 
  content_type foreign_key 
  codename char 
  Note: '''
    The permissions system provides a way to assign permissions to specific
    users and groups of users.

    The permission system is used by the Django admin site, but may also be
    useful in your own code. The Django admin site uses permissions as follows:

        - The "add" permission limits the user's ability to view the "add" form
          and add an object.
        - The "change" permission limits a user's ability to view the change
          list, view the "change" form and change an object.
        - The "delete" permission limits the ability to delete an object.
        - The "view" permission limits the ability to view an object.

    Permissions are set globally per type of object, not per specific object
    instance. It is possible to say "Mary may change news stories," but it's
    not currently possible to say "Mary may change news stories, but only the
    ones she created herself" or "Mary may only change news stories that have a
    certain status or publication date."

    The permissions listed above are automatically created for each model.
    '''
}
ref: Permission.content_type > ContentType.id


Table Group {
  id auto [pk, unique]
  name char [unique]
  Note: '''
    Groups are a generic way of categorizing users to apply permissions, or
    some other label, to those users. A user can belong to any number of
    groups.

    A user in a group automatically has all the permissions granted to that
    group. For example, if the group 'Site editors' has the permission
    can_edit_home_page, any user in that group will have that permission.

    Beyond permissions, groups are a convenient way to categorize users to
    apply some label, or extended functionality, to them. For example, you
    could create a group 'Special users', and you could write code that would
    do special things to those users -- such as giving them access to a
    members-only portion of your site, or sending them members-only email
    messages.
    '''
}


Table auth_group_permissions {
  permission_id auto [pk]
  group_id auto [pk]
}
ref: Group.id > auth_group_permissions.group_id
ref: Permission.id > auth_group_permissions.permission_id


Table User {
  id auto [pk, unique]
  password char 
  last_login date_time [null]
  is_superuser boolean [note:"Designates that this user has all permissions without explicitly assigning them."]
  username char [note:"Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.", unique]
  first_name char 
  last_name char 
  email email 
  is_staff boolean [note:"Designates whether the user can log into this admin site."]
  is_active boolean [note:"Designates whether this user should be treated as active. Unselect this instead of deleting accounts."]
  date_joined date_time 
  Note: '''
    Users within the Django authentication system are represented by this
    model.

    Username and password are required. Other fields are optional.
    '''
}


Table auth_user_groups {
  group_id auto [pk]
  user_id auto [pk]
}
ref: User.id > auth_user_groups.user_id
ref: Group.id > auth_user_groups.group_id


Table auth_user_user_permissions {
  permission_id auto [pk]
  user_id auto [pk]
}
ref: User.id > auth_user_user_permissions.user_id
ref: Permission.id > auth_user_user_permissions.permission_id


Table ContentType {
  id auto [pk, unique]
  app_label char 
  model char 
  Note: '''ContentType(id, app_label, model)'''
}


Table Session {
  session_key char [pk, unique]
  session_data text 
  expire_date date_time 
  Note: '''
    Django provides full support for anonymous sessions. The session
    framework lets you store and retrieve arbitrary data on a
    per-site-visitor basis. It stores data on the server side and
    abstracts the sending and receiving of cookies. Cookies contain a
    session ID -- not the data itself.

    The Django sessions framework is entirely cookie-based. It does
    not fall back to putting session IDs in URLs. This is an intentional
    design decision. Not only does that behavior make URLs ugly, it makes
    your site vulnerable to session-ID theft via the "Referer" header.

    For complete documentation on using Sessions in your code, consult
    the sessions documentation that is shipped with Django (also available
    on the Django web site).
    '''
}


Table DataSet {
  id big_auto [pk, unique]
  species char 
  owner foreign_key [null]
  name char [unique]
  created_at date_time 
  modified_at date_time 
  description char 
  mongo_keys j_s_o_n 
  Note: '''DataSet(id, species, owner, name, created_at, modified_at, description, mongo_keys)'''
}
ref: DataSet.owner > User.id


Table RTJob {
  id big_auto [pk, unique]
  owner foreign_key [null]
  dataset foreign_key 
  metadata_fields None 
  status char 
  pid integer [null]
  start_time date_time [null]
  end_time date_time [null]
  elapsed_time integer [null]
  error text [null]
  columns_summary_report None 
  metadata2report None 
  frequency_matrix None 
  count_matrix None 
  matrix_4_grapetree boolean 
  mx_transpose boolean 
  analysis char [note:"Must be 'HC', 'grapetree', or 'treecluster'."]
  threshold None [note:"See https://github.com/insapathogenomics/ReporTree and look for --threshold or --HC-threshold, depending on analysis argument (treecluster analysis is not supported)."]
  log text [null]
  newick text [null]
  Note: '''RTJob(id, owner, dataset, metadata_fields, status, pid, start_time, end_time, elapsed_time, error, columns_summary_report, metadata2report, frequency_matrix, count_matrix, matrix_4_grapetree, mx_transpose, analysis, threshold, log, newick)'''
}
ref: RTJob.owner > User.id
ref: RTJob.dataset > DataSet.id


Table Partition {
  id big_auto [pk, unique]
  rt_job foreign_key 
  name char 
  Note: '''Partition(id, rt_job, name)'''
}
ref: Partition.rt_job > RTJob.id


Table Cluster {
  id big_auto [pk, unique]
  created_by foreign_key [null]
  created_at date_time 
  modified_at date_time 
  species foreign_key [null]
  st positive_integer 
  cluster_number positive_integer 
  Note: '''Cluster(id, created_by, created_at, modified_at, species, st, cluster_number)'''
}
ref: Cluster.created_by > User.id
ref: Cluster.species > Species.id


Table Species {
  id big_auto [pk, unique]
  name char [unique]
  code char [unique]
  Note: '''Species(id, name, code)'''
}


Table SequenceGroup {
  id big_auto [pk, unique]
  species foreign_key 
  created_by foreign_key [null]
  created_at date_time 
  modified_at date_time 
  sequences j_s_o_n 
  cluster foreign_key [null]
  Note: '''SequenceGroup(id, species, created_by, created_at, modified_at, sequences, cluster)'''
}
ref: SequenceGroup.species > Species.id
ref: SequenceGroup.created_by > User.id
ref: SequenceGroup.cluster > Cluster.id


Table BaseTool {
  id big_auto [pk, unique]
  type char 
  name char 
  version char 
  Note: '''BaseTool(id, type, name, version)'''
}


Table Comparison {
  id big_auto [pk, unique]
  created_by foreign_key [null]
  created_at date_time 
  data_fields None 
  field_data j_s_o_n 
  status char 
  started_at date_time [null]
  ended_at date_time [null]
  elapsed_time date_time [null]
  error_msg char [null]
  folder_path char [null]
  newick text [null]
  base_tool foreign_key [null]
  linkage_method char 
  params j_s_o_n 
  microreact_project char [null]
  sequence_group foreign_key 
  Note: '''Comparison(id, created_by, created_at, data_fields, field_data, status, started_at, ended_at, elapsed_time, error_msg, folder_path, newick, base_tool, linkage_method, params, microreact_project, sequence_group)'''
}
ref: Comparison.created_by > User.id
ref: Comparison.base_tool > BaseTool.id
ref: Comparison.sequence_group > SequenceGroup.id


Table PotentialOutbreak {
  id big_auto [pk, unique]
  created_by foreign_key [null]
  created_at date_time 
  modified_at date_time 
  cluster foreign_key 
  suspected_source char 
  Note: '''PotentialOutbreak(id, created_by, created_at, modified_at, cluster, suspected_source)'''
}
ref: PotentialOutbreak.created_by > User.id
ref: PotentialOutbreak.cluster > Cluster.id


Table comparisons_potentialoutbreak_comparison {
  comparison_id auto [pk]
  potentialoutbreak_id auto [pk]
}
ref: PotentialOutbreak.id > comparisons_potentialoutbreak_comparison.potentialoutbreak_id
ref: Comparison.id > comparisons_potentialoutbreak_comparison.comparison_id


